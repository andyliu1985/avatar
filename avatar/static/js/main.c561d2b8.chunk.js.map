{"version":3,"sources":["Avatar.js","serviceWorker.js","index.js"],"names":["Avatar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","baseURL","searchContinue","state","isAllUsersLoaded","isProfileLoaded","users","user","errorMsg","search","bind","assertThisInitialized","getProfile","_this2","fetch","then","res","json","result","setState","error","e","keyWord","target","value","i","length","loginId","login","indexOf","_this3","divDisplay","errDisplay","divStyle","display","errStyle","react_default","a","createElement","type","placeholder","onChange","style","src","avatar_url","height","width","alt","name","followers","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Avatar","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c561d2b8.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Avatar extends React.Component {\n    constructor() {\n        super();\n        this.baseURL = \"https://api.github.com/users\";\n        this.searchContinue = true;\n        this.state = {\n            isAllUsersLoaded: true,\n            isProfileLoaded: true,\n            users: [],\n            user: {},\n            errorMsg: \"\"\n        };\n        this.search = this.search.bind(this);\n        this.getProfile = this.getProfile.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(this.baseURL + \"?access_token=e1f84fb3f213b5b68c29e9b394e669eb39dc2730\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isAllUsersLoaded: true,\n                        users: result\n                    })\n                },\n                (error) => {\n                    this.setState({\n                        isAllUsersLoaded: false,\n                        errorMsg: \"Can not load all users.\"\n                    })\n\n                }\n            ).then(() => {\n                if (this.state.isAllUsersLoaded) {\n                    this.setState({\n                        user: this.state.users[0]\n                    })\n                } else {\n                    this.setState({\n                        user: {}\n                    })\n                }\n            })\n    }\n\n    search(e) {\n        this.searchContinue = true;\n        let keyWord = e.target.value;\n        if (this.state.isAllUsersLoaded && keyWord !== \"\") {\n            for (var i = 0; i < this.state.users.length; i++) {\n\n                let user = this.state.users[i];\n                let loginId = user.login;\n\n                if (this.searchContinue && loginId.indexOf(keyWord) > 0) {\n                    this.searchContinue = false;\n                    this.getProfile(loginId);\n                }\n            }\n\n            if (this.searchContinue) {\n                this.setState({\n                    isProfileLoaded: false,\n                    errorMsg: \"Can not find this id: \" + keyWord\n                })\n            }\n        }\n    }\n\n    getProfile(loginId) {\n        fetch(this.baseURL + \"/\" + loginId + \"?access_token=e1f84fb3f213b5b68c29e9b394e669eb39dc2730\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isProfileLoaded: true,\n                        user: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isProfileLoaded: false,\n                        errorMsg: \"Can not load this id: \" + loginId\n                    })\n\n                }\n            )\n    }\n\n    render() {\n        let divDisplay = 'block';\n        let errDisplay = 'none';\n        if (this.state.isAllUsersLoaded && this.state.isProfileLoaded) {\n            divDisplay = 'block';\n            errDisplay = 'none';\n        } else {\n            divDisplay = 'none';\n            errDisplay = 'block';\n        }\n\n        const divStyle = {\n            display: divDisplay\n\n        }\n\n        const errStyle = {\n            display: errDisplay\n\n        }\n\n        return (\n            <div>\n                <input type=\"search\" placeholder=\"search profile by github id ...\" onChange={this.search}></input>\n                <br /><br />\n                <div style={divStyle}>\n                    <img src={this.state.user.avatar_url} height=\"100\" width=\"100\" alt=\"profile\"></img>\n                    <h1>Github ID: {this.state.user.login}</h1>\n                    <h1>Full Name: {this.state.user.name}</h1>\n                    <h1>Followers: {this.state.user.followers}</h1>\n                </div>\n                <div style={errStyle}>\n                    <h1>Error: {this.state.errorMsg}</h1>\n                </div>\n\n            </div>\n        );\n    };\n}\n\nexport default Avatar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Avatar from './Avatar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Avatar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}