{"version":3,"sources":["Avatar.js","serviceWorker.js","index.js"],"names":["Avatar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","baseURL","searchContinue","state","isLoaded1","isLoaded2","users","user","login","name","avatar_url","followers","defaultUser","search","bind","assertThisInitialized","update","getFullName","_this2","fetch","then","res","json","result","setState","error","console","log","e","searchText","target","value","i","length","_this3","indexOf","react_default","a","createElement","type","placeholder","onChange","src","height","width","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Avatar","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81d35391.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Avatar extends React.Component {\n    constructor() {\n        super();\n        this.baseURL = \"https://api.github.com/users\";\n        this.searchContinue = true;\n        this.state = {\n            isLoaded1: false,\n            isLoaded2: false,\n            users: [],\n            user: {\n                \"login\": \"mojombo\",\n                \"name\": \"Tom Preston-Werner\",\n                \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1?v=4\",\n                \"followers\": 21375\n            },\n            defaultUser: {\n                \"login\": \"mojombo\",\n                \"name\": \"Tom Preston-Werner\",\n                \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1?v=4\",\n                \"followers\": 21375\n            }\n        };\n        this.search = this.search.bind(this);\n        this.update = this.update.bind(this);\n        this.getFullName = this.getFullName.bind(this);\n    }\n\n    componentDidMount() {\n        if (!this.state.isLoaded1) {\n            fetch(this.baseURL)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        this.setState({\n                            isLoaded1: true,\n                            users: result\n                        })\n                    },\n                    (error) => ({\n                        isLoaded1: false,\n                        error\n                    })\n                )\n        }\n        console.log(this.state.isLoaded1);\n    }\n\n    update(e) {\n        const searchText = e.target.value;\n        console.log(searchText);\n        if (this.state.isLoaded1) {\n            // this.state.users.map((eachUser, index) => {\n            //     if (index < 5) {\n            //         const name = eachUser.login;\n            //         if (this.searchContinue) {\n            //             console.log(\"index\"+index);\n            //             this.searchContinue = false;\n            //             this.getFullName(name);\n            //         }\n            //     }\n            //     if (this.state.isLoaded2) {\n            //         return this.state.user;\n            //     } else {\n            //         return this.state.defaultUser;\n            //     }\n            // });\n            for (var i = 0; i < this.state.users.length; i++) {\n                if (i < 5) {\n                    const eachUser = this.state.users[i];\n                    const name = eachUser.login;\n                    if (this.searchContinue) {\n                        console.log(\"index: \" + i + \"; name: \" + name);\n                        this.searchContinue = false;\n                        this.getFullName(name);\n                    }\n                }\n            }\n        }\n    }\n\n    search(e) {\n        this.searchContinue = true;\n        this.update(e);\n    }\n\n    getFullName(name) {\n        console.log(\"name:\" + name + \"; continue: \" + this.searchContinue);\n\n        fetch(this.baseURL + \"/\" + name)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        user: result,\n                        isLoaded2: true\n                    })\n                },\n                (error) => ({\n                    isLoaded2: false,\n                    error\n                })\n            )\n\n        if (this.state.user.name.indexOf(name) > 0) {\n            this.searchContinue = false;\n        } else {\n            this.searchContinue = true;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <input type=\"search\" placeholder=\"search ...\" onChange={this.search}></input>\n                <br /><br />\n                <img src={this.state.user.avatar_url} height=\"100\" width=\"100\" alt=\"profile\"></img>\n                <h1>Github ID: {this.state.user.login}</h1>\n                <h1>Full Name: {this.state.user.name}</h1>\n                <h1>Followers: {this.state.user.followers}</h1>\n            </div>\n        );\n    };\n}\n\nexport default Avatar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Avatar from './Avatar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Avatar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}